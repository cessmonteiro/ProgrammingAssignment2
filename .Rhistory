for (i in 1:10){print(i)}
add2 <- function (x,y) {
x+y
}
add2(3,5)
above <- function(x,n){
use <- x>n
x[use]
}
x<-1:20
above(x)
above(x,12)
above <- function(x,n=10){
use <- x>n
x[use]
}
above(x)
?ls
?ls(environment)
?args
?get
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?as.is
R.version.string
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
my_div + c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Carlos")
my_name <- c(my_char, "Carlos")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(4,5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames (my_data) <- c(cnames, my_data)
colnames (my_data) <- c(cnames, my_matrix)
?colnames
colnames (my_data) <- cnames
my_data
true == true
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
5 != 7
5 !== 7
5 ==! 7
!5 == 7
FALSE & FALSE
TRUW & c(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical(twins, twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(flags, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
exit
all.data
pollutantmean <- function (directory, pollutant, id = 1:332){
"specdata"
a <- makeVector(c(1,2,3,4))
setwd("C:/Users/CESSM/Desktop/Coursera-Specialization/PA02/ProgrammingAssignment2")
source('C:/Users/CESSM/Desktop/Coursera-Specialization/PA02/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/CESSM/Desktop/Coursera-Specialization/PA02/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/CESSM/Desktop/Coursera-Specialization/PA02/ProgrammingAssignment2/cachematrix.R')
x <- matrix(c(9,10,14,8,-1,0,21,-1,2), 3,3)
print(x)
x2 <- makeCacheMatrix(x)
print(x2)
cacheSolve(x2)
cacheSolve(x2)
source('C:/Users/CESSM/Desktop/Coursera-Specialization/PA02/ProgrammingAssignment2/cachematrix.R')
